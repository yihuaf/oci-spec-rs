initSidebarItems({"constant":[["ANNOTATION_AUTHORS","AnnotationAuthors is the annotation key for the contact details of the people or organization responsible for the image (freeform string)."],["ANNOTATION_BASE_IMAGE_DIGEST","AnnotationBaseImageDigest is the annotation key for the digest of the image’s base image."],["ANNOTATION_BASE_IMAGE_NAME","AnnotationBaseImageName is the annotation key for the image reference of the image’s base image."],["ANNOTATION_CREATED","AnnotationCreated is the annotation key for the date and time on which the image was built (date-time string as defined by RFC 3339)."],["ANNOTATION_DESCRIPTION","AnnotationDescription is the annotation key for the human-readable description of the software packaged in the image."],["ANNOTATION_DOCUMENTATION","AnnotationDocumentation is the annotation key for the URL to get documentation on the image."],["ANNOTATION_LICENSES","AnnotationLicenses is the annotation key for the license(s) under which contained software is distributed as an SPDX License Expression."],["ANNOTATION_REF_NAME","AnnotationRefName is the annotation key for the name of the reference for a target. SHOULD only be considered valid when on descriptors on `index.json` within image layout."],["ANNOTATION_REVISION","AnnotationRevision is the annotation key for the source control revision identifier for the packaged software."],["ANNOTATION_SOURCE","AnnotationSource is the annotation key for the URL to get source code for building the image."],["ANNOTATION_TITLE","AnnotationTitle is the annotation key for the human-readable title of the image."],["ANNOTATION_URL","AnnotationURL is the annotation key for the URL to find more information on the image."],["ANNOTATION_VENDOR","AnnotationVendor is the annotation key for the name of the distributing entity, organization or individual."],["ANNOTATION_VERSION","AnnotationVersion is the annotation key for the version of the packaged software. The version MAY match a label or tag in the source code repository. The version MAY be Semantic versioning-compatible."]],"enum":[["MediaType","Media types used by OCI image format spec. Values MUST comply with RFC 6838, including the naming requirements in its section 4.2."]],"struct":[["Config","The execution parameters which SHOULD be used as a base when running a container using the image."],["ConfigBuilder","Builder for `Config`."],["Descriptor","A Content Descriptor (or simply Descriptor) describes the disposition of the targeted content. It includes the type of the content, a content identifier (digest), and the byte-size of the raw content. Descriptors SHOULD be embedded in other formats to securely reference external content."],["DescriptorBuilder","Builder for `Descriptor`."],["History","Describes the history of a layer."],["HistoryBuilder","Builder for `History`."],["ImageConfiguration","The image configuration is associated with an image and describes some basic information about the image such as date created, author, as well as execution/runtime configuration like its entrypoint, default arguments, networking, and volumes."],["ImageConfigurationBuilder","Builder for `ImageConfiguration`."],["ImageIndex","The image index is a higher-level manifest which points to specific image manifests, ideal for one or more platforms. While the use of an image index is OPTIONAL for image providers, image consumers SHOULD be prepared to process them."],["ImageIndexBuilder","Builder for `ImageIndex`."],["ImageManifest","Unlike the image index, which contains information about a set of images that can span a variety of architectures and operating systems, an image manifest provides a configuration and set of layers for a single container image for a specific architecture and operating system."],["ImageManifestBuilder","Builder for `ImageManifest`."],["Platform","Describes the minimum runtime requirements of the image."],["PlatformBuilder","Builder for `Platform`."],["RootFs","RootFs references the layer content addresses used by the image."],["RootFsBuilder","Builder for `RootFs`."]]});